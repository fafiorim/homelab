#!/bin/bash

# =============================================================================
# Module 01: Infrastructure - Proxmox VMs + Talos Kubernetes
# =============================================================================
# This module handles:
# - Proxmox VM creation with qemu-agent support
# - Talos Kubernetes cluster deployment
# - Cluster bootstrap and configuration
# =============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Module configuration
MODULE_NAME="Infrastructure"
MODULE_VERSION="1.0.0"
REQUIRED_TOOLS=("curl" "jq" "talosctl" "kubectl")

# Load configuration
CONFIG_FILE="cluster.conf"
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${RED}❌ Configuration file $CONFIG_FILE not found${NC}"
    exit 1
fi

source "$CONFIG_FILE"

# =============================================================================
# Helper Functions
# =============================================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_module() {
    echo -e "${CYAN}🏗️  Module: $MODULE_NAME v$MODULE_VERSION${NC}"
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    for tool in "${REQUIRED_TOOLS[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log_error "Required tool '$tool' not found"
            exit 1
        fi
    done
    
    # Check Proxmox API connectivity
    if ! curl -k -s -f -H "Authorization: PVEAPIToken=$proxmox_api_token_id=$proxmox_api_token_secret" \
        "$proxmox_api_url/nodes" > /dev/null; then
        log_error "Cannot connect to Proxmox API at $proxmox_api_url"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

cleanup_existing_resources() {
    log_info "Cleaning up existing resources..."
    
    # Remove existing VMs
    for vm_id in "${VM_IDS[@]}"; do
        if curl -k -s -H "Authorization: PVEAPIToken=$PROXMOX_API_TOKEN" \
            "$PROXMOX_API_URL/nodes/$PROXMOX_NODE/qemu/$vm_id" | jq -e '.data' > /dev/null; then
            log_warning "Removing existing VM $vm_id"
            curl -k -X DELETE -H "Authorization: PVEAPIToken=$PROXMOX_API_TOKEN" \
                "$PROXMOX_API_URL/nodes/$PROXMOX_NODE/qemu/$vm_id"
            sleep 2
        fi
    done
    
    # Clean local files
    rm -rf talos-configs kubeconfig talos-secrets.yaml
    
    log_success "Cleanup completed"
}

create_vm() {
    local vm_id=$1
    local vm_name=$2
    local vm_ip=$3
    local vm_type=${4:-"worker"}
    
    log_info "Creating VM $vm_id ($vm_name) with IP $vm_ip"
    
    # Create VM
    curl -k -X POST -H "Authorization: PVEAPIToken=$PROXMOX_API_TOKEN" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "vmid=$vm_id&name=$vm_name&memory=$VM_MEMORY&cores=$VM_CORES&net0=virtio,bridge=$VM_BRIDGE&scsi0=$VM_STORAGE:$VM_DISK_SIZE&ostype=l26&boot=order=scsi0&agent=1" \
        "$PROXMOX_API_URL/nodes/$PROXMOX_NODE/qemu"
    
    # Set ISO
    curl -k -X PUT -H "Authorization: PVEAPIToken=$PROXMOX_API_TOKEN" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "ide2=$VM_STORAGE:iso/$TALOS_ISO,media=cdrom" \
        "$PROXMOX_API_URL/nodes/$PROXMOX_NODE/qemu/$vm_id/config"
    
    # Start VM
    curl -k -X POST -H "Authorization: PVEAPIToken=$PROXMOX_API_TOKEN" \
        "$PROXMOX_API_URL/nodes/$PROXMOX_NODE/qemu/$vm_id/status/start"
    
    log_success "VM $vm_id created and started"
}

deploy_vms() {
    log_info "Deploying Proxmox VMs..."
    
    # Create control plane VM
    create_vm "${VM_IDS[0]}" "$CLUSTER_NAME-cp-01" "${VM_IPS[0]}" "controlplane"
    
    # Create worker VMs
    for i in $(seq 1 $((${#VM_IDS[@]}-1))); do
        create_vm "${VM_IDS[$i]}" "$CLUSTER_NAME-worker-$(printf "%02d" $i)" "${VM_IPS[$i]}" "worker"
    done
    
    log_info "Waiting for VMs to boot..."
    sleep 30
    
    log_success "All VMs deployed successfully"
}

generate_talos_config() {
    log_info "Generating Talos configuration..."
    
    # Generate machine configurations
    talosctl gen config "$CLUSTER_NAME" "https://${VM_IPS[0]}:6443" \
        --output-dir talos-configs \
        --with-examples=false \
        --with-docs=false
    
    # Patch configurations for qemu-agent support
    for i in "${!VM_IPS[@]}"; do
        if [ $i -eq 0 ]; then
            # Control plane configuration
            cat > talos-configs/controlplane-patch.yaml << EOF
machine:
  install:
    disk: /dev/sda
  network:
    hostname: $CLUSTER_NAME-cp-01
    interfaces:
      - interface: eth0
        dhcp: false
        addresses:
          - ${VM_IPS[0]}/24
        gateway: $VM_GATEWAY
        nameservers:
          - $VM_DNS
  features:
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles:
        - os:admin
      allowedKubernetesNamespaces:
        - kube-system
EOF
        else
            # Worker configuration
            worker_num=$(printf "%02d" $i)
            cat > talos-configs/worker-patch-$i.yaml << EOF
machine:
  install:
    disk: /dev/sda
  network:
    hostname: $CLUSTER_NAME-worker-$worker_num
    interfaces:
      - interface: eth0
        dhcp: false
        addresses:
          - ${VM_IPS[$i]}/24
        gateway: $VM_GATEWAY
        nameservers:
          - $VM_DNS
EOF
        fi
    done
    
    log_success "Talos configuration generated"
}

apply_talos_config() {
    log_info "Applying Talos configuration to VMs..."
    
    # Configure control plane
    talosctl apply-config --insecure \
        --nodes "${VM_IPS[0]}" \
        --file talos-configs/controlplane.yaml \
        --config-patch @talos-configs/controlplane-patch.yaml
    
    # Configure workers
    for i in $(seq 1 $((${#VM_IPS[@]}-1))); do
        talosctl apply-config --insecure \
            --nodes "${VM_IPS[$i]}" \
            --file talos-configs/worker.yaml \
            --config-patch @talos-configs/worker-patch-$i.yaml
    done
    
    log_info "Waiting for Talos to configure..."
    sleep 60
    
    log_success "Talos configuration applied"
}

bootstrap_cluster() {
    log_info "Bootstrapping Kubernetes cluster..."
    
    # Set talosctl context
    talosctl --talosconfig talos-configs/talosconfig config endpoint "${VM_IPS[0]}"
    talosctl --talosconfig talos-configs/talosconfig config node "${VM_IPS[0]}"
    
    # Bootstrap cluster
    talosctl --talosconfig talos-configs/talosconfig bootstrap
    
    log_info "Waiting for cluster to be ready..."
    sleep 120
    
    # Wait for cluster to be ready
    timeout 300 bash -c 'until talosctl --talosconfig talos-configs/talosconfig health; do sleep 10; done'
    
    # Get kubeconfig
    talosctl --talosconfig talos-configs/talosconfig kubeconfig kubeconfig
    
    # Wait for all nodes to be ready
    export KUBECONFIG="./kubeconfig"
    timeout 300 bash -c 'until [ $(kubectl get nodes --no-headers | grep -c Ready) -eq '${#VM_IPS[@]}' ]; do sleep 10; done'
    
    log_success "Kubernetes cluster bootstrapped successfully"
}

verify_deployment() {
    log_info "Verifying infrastructure deployment..."
    
    export KUBECONFIG="./kubeconfig"
    
    # Check nodes
    local ready_nodes=$(kubectl get nodes --no-headers | grep -c "Ready")
    if [ "$ready_nodes" -ne "${#VM_IPS[@]}" ]; then
        log_error "Expected ${#VM_IPS[@]} nodes, but only $ready_nodes are ready"
        return 1
    fi
    
    # Check system pods
    kubectl wait --for=condition=Ready pod -l k8s-app=kube-dns -n kube-system --timeout=300s
    
    log_success "Infrastructure verification completed"
    
    # Display cluster info
    echo ""
    echo -e "${CYAN}🎉 Infrastructure Deployment Complete!${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════${NC}"
    echo -e "${GREEN}Cluster Name:${NC} $CLUSTER_NAME"
    echo -e "${GREEN}Control Plane:${NC} ${VM_IPS[0]}"
    echo -e "${GREEN}Nodes:${NC}"
    kubectl get nodes -o wide
    echo ""
}

# =============================================================================
# Main Execution
# =============================================================================

main() {
    log_module
    echo ""
    
    check_prerequisites
    cleanup_existing_resources
    deploy_vms
    generate_talos_config
    apply_talos_config
    bootstrap_cluster
    verify_deployment
    
    log_success "Module $MODULE_NAME completed successfully!"
}

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi